
/*
 * Swagger Saxo Bank openapi
 *
 * Saxo Bank openapi for trading
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package saxo_openapi

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type AccountHistoryApiService service
/*
AccountHistoryApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param clientKey
 * @param optional nil or *AccountHistoryApiGetHistoricalPositionsOpts - Optional Parameters:
     * @param "Inlinecount" (optional.Interface of []string) - 
     * @param "Skip" (optional.Int32) - 
     * @param "Skiptoken" (optional.String) - 
     * @param "Top" (optional.Int32) - 
     * @param "AccountGroupKey" (optional.String) - 
     * @param "AccountKey" (optional.String) - 
     * @param "AssetType" (optional.Interface of []string) - 
     * @param "FromDate" (optional.String) - 
     * @param "MockDataId" (optional.String) - 
     * @param "StandardPeriod" (optional.Interface of []string) - 
     * @param "Symbol" (optional.Interface of []string) - 
     * @param "ToDate" (optional.String) - 
@return interface{}
*/

type AccountHistoryApiGetHistoricalPositionsOpts struct {
    Inlinecount optional.Interface
    Skip optional.Int32
    Skiptoken optional.String
    Top optional.Int32
    AccountGroupKey optional.String
    AccountKey optional.String
    AssetType optional.Interface
    FromDate optional.String
    MockDataId optional.String
    StandardPeriod optional.Interface
    Symbol optional.Interface
    ToDate optional.String
}

func (a *AccountHistoryApiService) GetHistoricalPositions(ctx context.Context, clientKey string, localVarOptionals *AccountHistoryApiGetHistoricalPositionsOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/openapi/hist/v3/positions/{ClientKey}/"
	localVarPath = strings.Replace(localVarPath, "{"+"ClientKey"+"}", fmt.Sprintf("%v", clientKey), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Inlinecount.IsSet() {
		localVarQueryParams.Add("$inlinecount", parameterToString(localVarOptionals.Inlinecount.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.Skip.IsSet() {
		localVarQueryParams.Add("$skip", parameterToString(localVarOptionals.Skip.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Skiptoken.IsSet() {
		localVarQueryParams.Add("$skiptoken", parameterToString(localVarOptionals.Skiptoken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Top.IsSet() {
		localVarQueryParams.Add("$top", parameterToString(localVarOptionals.Top.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountGroupKey.IsSet() {
		localVarQueryParams.Add("AccountGroupKey", parameterToString(localVarOptionals.AccountGroupKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountKey.IsSet() {
		localVarQueryParams.Add("AccountKey", parameterToString(localVarOptionals.AccountKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AssetType.IsSet() {
		localVarQueryParams.Add("AssetType", parameterToString(localVarOptionals.AssetType.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.FromDate.IsSet() {
		localVarQueryParams.Add("FromDate", parameterToString(localVarOptionals.FromDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MockDataId.IsSet() {
		localVarQueryParams.Add("MockDataId", parameterToString(localVarOptionals.MockDataId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StandardPeriod.IsSet() {
		localVarQueryParams.Add("StandardPeriod", parameterToString(localVarOptionals.StandardPeriod.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.Symbol.IsSet() {
		localVarQueryParams.Add("Symbol", parameterToString(localVarOptionals.Symbol.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ToDate.IsSet() {
		localVarQueryParams.Add("ToDate", parameterToString(localVarOptionals.ToDate.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 201 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountHistoryApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param clientKey
 * @param optional nil or *AccountHistoryApiGetPerformanceOpts - Optional Parameters:
     * @param "AccountGroupKey" (optional.String) - 
     * @param "AccountKey" (optional.String) - 
     * @param "FieldGroups" (optional.Interface of []string) - 
     * @param "FromDate" (optional.String) - 
     * @param "MockDataId" (optional.String) - 
     * @param "StandardPeriod" (optional.Interface of []string) - 
     * @param "ToDate" (optional.String) - 
@return interface{}
*/

type AccountHistoryApiGetPerformanceOpts struct {
    AccountGroupKey optional.String
    AccountKey optional.String
    FieldGroups optional.Interface
    FromDate optional.String
    MockDataId optional.String
    StandardPeriod optional.Interface
    ToDate optional.String
}

func (a *AccountHistoryApiService) GetPerformance(ctx context.Context, clientKey string, localVarOptionals *AccountHistoryApiGetPerformanceOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/openapi/hist/v3/perf/{ClientKey}/"
	localVarPath = strings.Replace(localVarPath, "{"+"ClientKey"+"}", fmt.Sprintf("%v", clientKey), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.AccountGroupKey.IsSet() {
		localVarQueryParams.Add("AccountGroupKey", parameterToString(localVarOptionals.AccountGroupKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccountKey.IsSet() {
		localVarQueryParams.Add("AccountKey", parameterToString(localVarOptionals.AccountKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FieldGroups.IsSet() {
		localVarQueryParams.Add("FieldGroups", parameterToString(localVarOptionals.FieldGroups.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.FromDate.IsSet() {
		localVarQueryParams.Add("FromDate", parameterToString(localVarOptionals.FromDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MockDataId.IsSet() {
		localVarQueryParams.Add("MockDataId", parameterToString(localVarOptionals.MockDataId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StandardPeriod.IsSet() {
		localVarQueryParams.Add("StandardPeriod", parameterToString(localVarOptionals.StandardPeriod.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ToDate.IsSet() {
		localVarQueryParams.Add("ToDate", parameterToString(localVarOptionals.ToDate.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 201 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AccountHistoryApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param clientKey
 * @param optional nil or *AccountHistoryApiGetStandardPeriodAccountValuesOpts - Optional Parameters:
     * @param "MockDataId" (optional.String) - 
@return interface{}
*/

type AccountHistoryApiGetStandardPeriodAccountValuesOpts struct {
    MockDataId optional.String
}

func (a *AccountHistoryApiService) GetStandardPeriodAccountValues(ctx context.Context, clientKey string, localVarOptionals *AccountHistoryApiGetStandardPeriodAccountValuesOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/openapi/hist/v3/accountValues/{ClientKey}/"
	localVarPath = strings.Replace(localVarPath, "{"+"ClientKey"+"}", fmt.Sprintf("%v", clientKey), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.MockDataId.IsSet() {
		localVarQueryParams.Add("MockDataId", parameterToString(localVarOptionals.MockDataId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 201 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
